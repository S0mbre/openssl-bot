import logging
import asyncio
from aiogram import Bot, Dispatcher, F, html
from aiogram.filters import Command, Text
from aiogram.utils import markdown as md
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, BufferedInputFile, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.chat_action import ChatActionMiddleware, ChatActionSender

from config import CONFIG
import ossl

# ============================================================ #

ESCAPE_MAP = {'_': '\\_', '*': '\\*', '[': '\\[', ']': '\\]', '(': '\\(', ')': '\\)', 
              '~': '\\~', '`': '\\`', '>': '\\>', '#': '\\#', '+': '\\+', '-': '\\-', 
              '=': '\\=', '|': '\\|', '{': '\\{', '}': '\\}', '.': '\\.', '!': '\\!'}

BOT_HELP = \
""" 
‚ö° ‚ìÖ‚ìÄ‚í∏‚ìà ‚ë†‚ë° Generator ‚ö°

–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –í–∞–º —Å–æ–∑–¥–∞—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ PKCS-12 –∏–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (PEM) 
–ø—Ä–∏ –ø–æ–º–æ—â–∏ OpenSSL PKCS12: https://www.openssl.org/docs/man1.1.1/man1/pkcs12.html

–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –í–∞—Å –µ—Å—Ç—å:

1. SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ò–õ–ò —Ü–µ–ø–æ—á–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
2. –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∫ —ç—Ç–æ–º—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É / —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º –≤ —Ü–µ–ø–æ—á–∫–µ

–û–±–∞ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PEM, —Ç.–µ. –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∞–∫–æ–π:

-----BEGIN ... -----
<—Ç–µ–ª–æ –∫–ª—é—á–∞>
-----END ... -----

–ù–∞–∂–º–∏—Ç–µ –∏–ª–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ "–ù–∞—á–∞—Ç—å", —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å. 
–í –ª—é–±–æ–µ –≤—Ä–µ–º—è –Ω–∞–∂–º–∏—Ç–µ / –Ω–∞–±–µ—Ä–∏—Ç–µ "–°–±—Ä–æ—Å", —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É.
"""

logging.basicConfig(level=logging.INFO)

bot = Bot(token=CONFIG.bot_token.get_secret_value())
dp = Dispatcher(storage=MemoryStorage())
dp.message.middleware(ChatActionMiddleware())

# ============================================================ #

class MyStates(StatesGroup):
    start_state = State()
    sending_crt_state = State()
    sending_key_state = State()
    sending_chain_state = State()
    setting_name_state = State()
    setting_pw_state = State()

START_BUTTONS = ['–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL', '–ù–∞—á–∞—Ç—å', '–°–±—Ä–æ—Å']
CRT_BUTTONS = ['–°–±—Ä–æ—Å', '–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ', '–î–∞–ª–µ–µ']
SKIP_BUTTONS = ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']
NAME_BUTTONS = ['–°–±—Ä–æ—Å', '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', '–î–∞–ª–µ–µ']
PW_BUTTONS = ['–°–±—Ä–æ—Å', '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å', '–ó–∞–≤–µ—Ä—à–∏—Ç—å']

# ============================================================ #

def make_keyboard(items: list[str], placeholder: str = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ') -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.add(*[KeyboardButton(text=item) for item in items])
    builder.adjust(min(3, len(items)))
    return builder.as_markup(resize_keyboard=True, input_field_placeholder=placeholder or None)

def escape_symbols(msg: str) -> str:
    msg_ = msg
    for k, v in ESCAPE_MAP.items():
        msg_ = msg_.replace(k, v)
    return msg_

# ================ 1 - –°–¢–ê–†–¢

@dp.message(Command(commands=['start', 'help']))
@dp.message(Text(text=['–°–±—Ä–æ—Å']))
async def start(message: Message, state: FSMContext):
    if message.text != '/help':
        await state.clear()
        await state.set_state(MyStates.start_state)
    await message.answer(BOT_HELP, reply_markup=make_keyboard(START_BUTTONS))

# ================ 2 - –ü–†–û–í–ï–†–ö–ê OPENSSL

@dp.message(MyStates.start_state, Text(text='–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL'))
async def checkssl(message: Message):
    res = ossl.check_ossl()
    if res:
        await message.reply(f'üëç OpenSSL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {res}', 
                             reply_markup=make_keyboard(START_BUTTONS))
    else:
        await message.reply('‚õî OpenSSL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç', 
                             reply_markup=make_keyboard(START_BUTTONS))
        
# ================ 3 - –û–¢–ü–†–ê–í–ö–ê –û–¢–ö–†–´–¢–û–ì–û –ö–õ–Æ–ß–ê (–°–ï–†–¢–ò–§–ò–ö–ê–¢–ê)

@dp.message(MyStates.start_state, Text(text='–ù–∞—á–∞—Ç—å'))
async def send_crt(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(MyStates.sending_crt_state)
    await message.answer('‚úç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (.crt, .pem) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç', 
                         reply_markup=make_keyboard(SKIP_BUTTONS))

@dp.message(MyStates.sending_crt_state, F.text.startswith('-----BEGIN CERTIFICATE-----'))
async def send_crt_text(message: Message, state: FSMContext):
    # await state.set_state(MyStates.sending_crt_state)
    await state.update_data({'crt': message.text})    
    await message.answer('‚úÖ –ü–æ–ª—É—á–µ–Ω SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (.crt, .pem)', 
                         reply_markup=make_keyboard(CRT_BUTTONS))

@dp.message(MyStates.sending_crt_state, F.document)
async def send_crt_file(message: Message, state: FSMContext, bot: Bot):
    # await state.set_state(MyStates.sending_crt_state)
    file = await bot.get_file(message.document.file_id)
    iostream = await bot.download_file(file.file_path)
    await state.update_data({'crt': iostream.getvalue().decode(ossl.ENC)})
    await message.answer(f'‚úÖ –ü–æ–ª—É—á–µ–Ω SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (.crt, .pem): {message.document.file_name}',
                         reply_markup=make_keyboard(CRT_BUTTONS))  
    
@dp.message(MyStates.sending_crt_state, Text(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
async def send_crt_skip(message: Message, state: FSMContext):
    # await state.set_state(MyStates.sending_crt_state)
    await state.update_data({'crt': None})    
    await message.reply('‚úò SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–æ–ø—É—â–µ–Ω', 
                         reply_markup=make_keyboard(CRT_BUTTONS))

@dp.message(MyStates.sending_crt_state, Text(text='–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ'))
async def send_crt_text_reload(message: Message, state: FSMContext):
    await state.update_data({'crt': None})
    await message.answer('‚úç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (.crt, .pem) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç', 
                         reply_markup=make_keyboard(SKIP_BUTTONS))
        
# ================ 3 - –û–¢–ü–†–ê–í–ö–ê –ó–ê–ö–†–´–¢–û–ì–û (–ü–†–ò–í–ê–¢–ù–û–ì–û) –ö–õ–Æ–ß–ê

@dp.message(MyStates.sending_crt_state, Text(text='–î–∞–ª–µ–µ'))
async def crt_next(message: Message, state: FSMContext):
    await state.set_state(MyStates.sending_key_state)
    await message.answer('‚úç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (.key, .pem) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç', 
                         reply_markup=make_keyboard(SKIP_BUTTONS))
    # data = await state.get_data()
    # await message.answer(data['crt'], reply_markup=ReplyKeyboardRemove())
      
@dp.message(MyStates.sending_key_state, F.text.contains('PRIVATE KEY-----'))
async def send_priv_text(message: Message, state: FSMContext):
    # await state.set_state(MyStates.sending_priv_state)
    await state.update_data({'priv': message.text})    
    await message.answer('‚úÖ –ü–æ–ª—É—á–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (.key, .pem)', 
                         reply_markup=make_keyboard(CRT_BUTTONS))

@dp.message(MyStates.sending_key_state, F.document)
async def send_priv_file(message: Message, state: FSMContext, bot: Bot):
    file = await bot.get_file(message.document.file_id)
    iostream = await bot.download_file(file.file_path)
    await state.update_data({'priv': iostream.getvalue().decode(ossl.ENC)})
    await message.answer(f'‚úÖ –ü–æ–ª—É—á–µ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (.key, .pem): {message.document.file_name}',
                         reply_markup=make_keyboard(CRT_BUTTONS))  
    
@dp.message(MyStates.sending_key_state, Text(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
async def send_priv_skip(message: Message, state: FSMContext):
    # await state.set_state(MyStates.sending_priv_state)
    await state.update_data({'priv': None})    
    await message.reply('‚úò –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –ø—Ä–æ–ø—É—â–µ–Ω', 
                         reply_markup=make_keyboard(CRT_BUTTONS))

@dp.message(MyStates.sending_key_state, Text(text='–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ'))
async def send_priv_text_reload(message: Message, state: FSMContext):
    await state.update_data({'priv': None})  
    await message.answer('‚úç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (.key, .pem) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç', 
                         reply_markup=make_keyboard(SKIP_BUTTONS))

# ================ 4 - –û–¢–ü–†–ê–í–ö–ê –¶–ï–ü–û–ß–ö–ò –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í

@dp.message(MyStates.sending_key_state, Text(text='–î–∞–ª–µ–µ'))
async def priv_next(message: Message, state: FSMContext):
    await state.set_state(MyStates.sending_chain_state)
    await message.answer('‚úç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª —Ü–µ–ø–æ—á–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (.crt, .pem) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç', 
                         reply_markup=make_keyboard(SKIP_BUTTONS))
    # data = await state.get_data()
    # await message.answer(data['crt'], reply_markup=ReplyKeyboardRemove())
      
@dp.message(MyStates.sending_chain_state, F.text.startswith('-----BEGIN'))
async def send_chain_text(message: Message, state: FSMContext):
    # await state.set_state(MyStates.sending_priv_state)
    await state.update_data({'chain': message.text})    
    await message.answer('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤', 
                         reply_markup=make_keyboard(CRT_BUTTONS))

@dp.message(MyStates.sending_chain_state, F.document)
async def send_chain_file(message: Message, state: FSMContext, bot: Bot):
    file = await bot.get_file(message.document.file_id)
    iostream = await bot.download_file(file.file_path)
    await state.update_data({'chain': iostream.getvalue().decode(ossl.ENC)})
    await message.answer(f'‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {message.document.file_name}',
                         reply_markup=make_keyboard(CRT_BUTTONS))  
    
@dp.message(MyStates.sending_chain_state, Text(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
async def send_chain_skip(message: Message, state: FSMContext):
    # await state.set_state(MyStates.sending_priv_state)
    await state.update_data({'chain': None})    
    await message.reply('‚úò –¶–µ–ø–æ—á–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∞', 
                         reply_markup=make_keyboard(CRT_BUTTONS))

@dp.message(MyStates.sending_chain_state, Text(text='–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ'))
async def send_chain_text_reload(message: Message, state: FSMContext):
    await state.update_data({'chain': None})  
    await message.answer('‚úç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª —Ü–µ–ø–æ—á–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (.crt, .pem) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç', 
                         reply_markup=make_keyboard(SKIP_BUTTONS))
    
# ================ 5 - –£–ö–ê–ó–ê–ù–ò–ï –ò–ú–ï–ù–ò (–ê–õ–ò–ê–°–ê)

@dp.message(MyStates.sending_chain_state, Text(text='–î–∞–ª–µ–µ'))
async def chain_next(message: Message, state: FSMContext):
    await state.set_state(MyStates.setting_name_state)
    await message.answer('‚úç –£–∫–∞–∂–∏—Ç–µ –∏–º—è (–∞–ª–∏–∞—Å) –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç', 
                         reply_markup=make_keyboard(SKIP_BUTTONS))
    
@dp.message(MyStates.setting_name_state, Text(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
async def set_name_skip(message: Message, state: FSMContext):
    # await state.set_state(MyStates.sending_priv_state)
    await state.update_data({'name': None})    
    await message.reply('‚úò –ò–º—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ', 
                         reply_markup=make_keyboard(NAME_BUTTONS))
    
@dp.message(MyStates.setting_name_state, Text(text='–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è'))
async def set_name_reload(message: Message, state: FSMContext):
    await state.update_data({'name': None})  
    await message.answer('‚úç –£–∫–∞–∂–∏—Ç–µ –∏–º—è (–∞–ª–∏–∞—Å) –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç', 
                         reply_markup=make_keyboard(SKIP_BUTTONS))
    
@dp.message(MyStates.setting_name_state, F.text.regexp(r'[A-Za-z]+'))
async def set_name_text(message: Message, state: FSMContext):
    # await state.set_state(MyStates.sending_priv_state)
    await state.update_data({'name': message.text.strip()})    
    await message.answer(f'‚úÖ –ò–º—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: "{message.text.strip()}"', 
                         reply_markup=make_keyboard(NAME_BUTTONS))
    
# ================ 6 - –£–ö–ê–ó–ê–ù–ò–ï –ü–ê–†–û–õ–Ø

@dp.message(MyStates.setting_name_state, Text(text='–î–∞–ª–µ–µ'))
async def set_name_next(message: Message, state: FSMContext):
    await state.set_state(MyStates.setting_pw_state)
    await message.answer('‚úç –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç', 
                         reply_markup=make_keyboard(SKIP_BUTTONS))
    
@dp.message(MyStates.setting_pw_state, Text(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
async def set_pw_skip(message: Message, state: FSMContext):
    # await state.set_state(MyStates.sending_priv_state)
    await state.update_data({'pw': None})    
    await message.reply('‚úò –ü–∞—Ä–æ–ª—å –ø—Ä–æ–ø—É—â–µ–Ω', 
                         reply_markup=make_keyboard(PW_BUTTONS))
    
@dp.message(MyStates.setting_pw_state, Text(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å'))
async def set_pw_reload(message: Message, state: FSMContext):
    await state.update_data({'pw': None})  
    await message.answer('‚úç –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç', 
                         reply_markup=make_keyboard(SKIP_BUTTONS))
    
@dp.message(MyStates.setting_pw_state, F.text.regexp(r'[A-Za-z0-9\!\@\#\$\%\^\&\*\(\)\-\_\+\=\/\.\,\<\>\[\]\?\;\'\"]+'))
async def set_pw_text(message: Message, state: FSMContext):
    # await state.set_state(MyStates.sending_priv_state)
    await state.update_data({'pw': message.text.strip()})    
    await message.answer(f'‚úÖ –ü–∞—Ä–æ–ª—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: "{message.text.strip()}"', 
                         reply_markup=make_keyboard(PW_BUTTONS))
    
# ================ 7 - –ó–ê–í–ï–†–®–ï–ù–ò–ï

@dp.message(MyStates.setting_pw_state, Text(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å'))
async def make_p12(message: Message, state: FSMContext, bot: Bot):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        data = await state.get_data()
        cert = data.get('crt', None)
        certchain = data.get('chain', None)
        key = data.get('priv', None)
        alias = data.get('name', None)
        pw = data.get('pw', None)
        # logging.info(data)
        await state.clear()
        await state.set_state(MyStates.start_state)
        try:
            buf = ossl.make_pkcs12(cert, certchain, key, alias, pw)        
        except Exception as err:
            await message.answer(f'‚õî –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:{ossl.NL}{str(err)}', 
                                reply_markup=ReplyKeyboardRemove())
            await message.answer(BOT_HELP, reply_markup=make_keyboard(START_BUTTONS))
            return
        await message.answer_document(BufferedInputFile(buf, filename='cert.p12'), 
                                    caption='ü§≤ –í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≥–æ—Ç–æ–≤',
                                    reply_markup=ReplyKeyboardRemove())

# ============================================================ #

async def main():
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    asyncio.run(main())
